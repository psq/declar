(define-constant contract-owner 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR)
(define-constant no-liquidity-err (err u1))
(define-constant transfer-failed-err (err u2))
(define-constant not-owner-err (err u3))
(define-constant no-fee-to-address-err (err u4))
(define-constant e10-err (err u10))
(define-constant e11-err (err u11))
(define-constant e12-err (err u12))
(define-data-var x-balance uint u0)
(define-data-var y-balance uint u0)
(define-data-var fee-x-balance uint u0)
(define-data-var fee-y-balance uint u0)
(define-data-var total-balances uint u0)
(define-map positions ((owner principal)) ((balance uint)))
(define-data-var fee-to-address (optional principal) none)
(define-private (position-of (owner principal)) (default-to u0 (get balance (map-get? positions ((owner owner))))))
(define-read-only (get-position-of (owner principal)) (ok (position-of owner)))
(define-read-only (get-positions) (ok (var-get total-balances)))
(define-read-only (get-balances-of (owner principal)) (let ((x (var-get x-balance)) (y (var-get y-balance)) (balance (var-get total-balances)) (share (position-of owner))) (if (> balance u0) (ok (list (/ (* x share) balance) (/ (* y share) balance))) no-liquidity-err )))
(define-private (decrease-position (owner principal) (amount uint)) (let ((balance (position-of owner))) (if (or (> amount balance) (<= amount u0)) true (begin (map-set positions ((owner owner)) ((balance (- balance amount)))) true))))
(define-private (increase-position (owner principal) (amount uint)) (let ((balance (position-of owner))) (if (<= amount u0) false (begin (print (tuple (owner owner))) (print (map-set positions ((owner owner)) ((balance (+ balance amount))))) true))))
(define-read-only (get-balances) (ok (list (var-get x-balance) (var-get y-balance))))
(define-public (add-to-position (x uint) (y uint)) (let ((contract-address (as-contract tx-sender))) (if (and (is-ok (print (contract-call? 'SP2NC4YKZWM2YMCJV851VF278H9J50ZSNM33P3JM1.my-token transfer contract-address x))) (is-ok (print (contract-call? 'SP1QR3RAGH3GEME9WV7XB0TZCX6D5MNDQP97D35EH.my-token transfer contract-address y)))) (begin (if (is-eq (var-get total-balances) u0) (begin (increase-position tx-sender x) (var-set total-balances x)) (let ((new-shares (* (/ x (var-get x-balance)) (var-get total-balances)))) (increase-position tx-sender new-shares) (var-set total-balances (+ new-shares (var-get total-balances))))) (var-set x-balance (+ x (var-get x-balance))) (var-set y-balance (+ y (var-get y-balance))) (ok true)) (begin transfer-failed-err))))
(define-public (reduce-position (percent uint)) (let ((position (position-of tx-sender)) (balances (var-get total-balances)) (contract-address (as-contract tx-sender)) (sender tx-sender)) (let ((withdrawal (/ (* position percent) u100))) (let ((remaing-position (- position withdrawal)) (withdrawal-x (/ (* withdrawal (var-get x-balance)) balances)) (withdrawal-y (/ (* withdrawal (var-get y-balance)) balances))) (if (and (<= percent u100) (is-ok (print (as-contract (contract-call? 'SP2NC4YKZWM2YMCJV851VF278H9J50ZSNM33P3JM1.my-token transfer sender withdrawal-x)))) (is-ok (print (as-contract (contract-call? 'SP1QR3RAGH3GEME9WV7XB0TZCX6D5MNDQP97D35EH.my-token transfer sender withdrawal-y))))) (begin (decrease-position tx-sender withdrawal) (var-set total-balances (- balances withdrawal)) (var-set x-balance (- (var-get x-balance) withdrawal-x)) (var-set y-balance (- (var-get y-balance) withdrawal-y)) (ok (list withdrawal-x withdrawal-y))) (begin (err transfer-failed-err)))))))
(define-public (swap-exact-x-for-y (dx uint)) (let ((contract-address (as-contract tx-sender)) (sender tx-sender) (dy (/ (* u997 (var-get y-balance) dx) (+ (* u1000 (var-get x-balance)) (* u997 dx)))) (fee (/ (* u5 dx) u10000)) ) (print contract-address) (print (var-get x-balance)) (print (var-get y-balance)) (print dx) (print dy) (print fee) (if (and (is-ok (print (contract-call? 'SP2NC4YKZWM2YMCJV851VF278H9J50ZSNM33P3JM1.my-token transfer contract-address dx))) (is-ok (print (as-contract (contract-call? 'SP1QR3RAGH3GEME9WV7XB0TZCX6D5MNDQP97D35EH.my-token transfer sender dy))))) (begin (var-set y-balance (- (var-get y-balance) dy)) (if (is-some (var-get fee-to-address)) (begin (var-set x-balance (- (+ (var-get x-balance) dx) fee)) (var-set fee-x-balance (+ fee (var-get fee-x-balance)))) (var-set x-balance (+ (var-get x-balance) dx)) ) (ok (list dx dy))) transfer-failed-err)))
(define-public (swap-x-for-exact-y (dy uint)) (let ((contract-address (as-contract tx-sender)) (sender tx-sender) (dx (/ (* u1000 (var-get x-balance) dy) (* u997 (- (var-get y-balance) dy)))) (fee (/ (* (var-get x-balance) dy) (* u1994 (- (var-get y-balance) dy)))) ) (print contract-address) (print (var-get x-balance)) (print (var-get y-balance)) (print dx) (print dy) (print fee) (if (and (is-ok (print (contract-call? 'SP2NC4YKZWM2YMCJV851VF278H9J50ZSNM33P3JM1.my-token transfer contract-address dx))) (is-ok (print (as-contract (contract-call? 'SP1QR3RAGH3GEME9WV7XB0TZCX6D5MNDQP97D35EH.my-token transfer sender dy))))) (begin (var-set y-balance (- (var-get y-balance) dy)) (if (is-some (var-get fee-to-address)) (begin (var-set x-balance (- (+ (var-get x-balance) dx) fee)) (var-set fee-x-balance (+ fee (var-get fee-x-balance)))) (var-set x-balance (+ (var-get x-balance) dx)) ) (ok (list dx dy))) transfer-failed-err)))
(define-public (swap-exact-y-for-x (dy uint)) (let ((contract-address (as-contract tx-sender)) (sender tx-sender) (dx (/ (* u997 (var-get x-balance) dy) (+ (* u1000 (var-get y-balance)) (* u997 dy)))) (fee (/ (* u5 dy) u10000)) ) (print (var-get x-balance)) (print (var-get y-balance)) (print dx) (print dy) (print fee) (if (and (is-ok (print (as-contract (contract-call? 'SP2NC4YKZWM2YMCJV851VF278H9J50ZSNM33P3JM1.my-token transfer sender dx)))) (is-ok (print (contract-call? 'SP1QR3RAGH3GEME9WV7XB0TZCX6D5MNDQP97D35EH.my-token transfer contract-address dy)))) (begin (var-set x-balance (- (var-get x-balance) dx)) (if (is-some (var-get fee-to-address)) (begin (var-set fee-y-balance (+ fee (var-get fee-y-balance))) (var-set y-balance (- (+ (var-get y-balance) dy) fee)) ) (var-set y-balance (+ (var-get y-balance) dy)) ) (ok (list dx dy))) transfer-failed-err)))
(define-public (swap-y-for-exact-x (dx uint)) (let ((contract-address (as-contract tx-sender)) (sender tx-sender) (dy (/ (* u1000 (var-get y-balance) dx) (* u997 (- (var-get x-balance) dx)))) (fee (/ (* (var-get y-balance) dx) (* u1994 (- (var-get x-balance) dx)))) ) (print contract-address) (print (var-get x-balance)) (print (var-get y-balance)) (print dx) (print dy) (print fee) (if (and (is-ok (print (as-contract (contract-call? 'SP2NC4YKZWM2YMCJV851VF278H9J50ZSNM33P3JM1.my-token transfer sender dx)))) (is-ok (print (contract-call? 'SP1QR3RAGH3GEME9WV7XB0TZCX6D5MNDQP97D35EH.my-token transfer contract-address dy)))) (begin (var-set x-balance (- (var-get x-balance) dx)) (if (is-some (var-get fee-to-address)) (begin (var-set y-balance (- (+ (var-get y-balance) dy) fee)) (var-set fee-y-balance (+ fee (var-get fee-y-balance)))) (var-set y-balance (+ (var-get y-balance) dy)) ) (ok (list dx dy))) transfer-failed-err)))
(define-public (set-fee-to-address (address principal)) (begin (if (is-eq tx-sender contract-owner) (begin (var-set fee-to-address (some address)) (ok true)) not-owner-err)))
(define-public (reset-fee-to-address) (begin (if (is-eq tx-sender contract-owner) (begin (var-set fee-to-address none) (ok true)) not-owner-err)))
(define-read-only (get-fee-to-address) (ok (var-get fee-to-address)))
(define-read-only (get-fees) (begin (ok (list (var-get fee-x-balance) (var-get fee-y-balance)))))
(define-public (collect-fees) (let ((address (unwrap! (var-get fee-to-address) no-fee-to-address-err)) (fee-x (var-get fee-x-balance)) (fee-y (var-get fee-y-balance))) (print fee-x) (print fee-y) (print (as-contract tx-sender)) (print (contract-call? 'SP2NC4YKZWM2YMCJV851VF278H9J50ZSNM33P3JM1.my-token balance-of (as-contract tx-sender))) (print (contract-call? 'SP1QR3RAGH3GEME9WV7XB0TZCX6D5MNDQP97D35EH.my-token balance-of (as-contract tx-sender))) (print address) (if (and (or (is-eq fee-x u0) (is-ok (print (as-contract (contract-call? 'SP2NC4YKZWM2YMCJV851VF278H9J50ZSNM33P3JM1.my-token transfer address fee-x))))) (or (is-eq fee-y u0) (is-ok (print (as-contract (contract-call? 'SP1QR3RAGH3GEME9WV7XB0TZCX6D5MNDQP97D35EH.my-token transfer address fee-y)))))) (begin (var-set fee-x-balance u0) (var-set fee-y-balance u0) (ok (list fee-x fee-y))) transfer-failed-err)))
