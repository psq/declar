(impl-trait 'SP2TPZ623K5N2WYF1BWRMP5A93PSBWWADQGKJRJCS.token-transfer-trait.can-transfer-tokens)
(define-data-var total-supply uint u0)
(define-fungible-token wrapped-token)
(define-read-only (get-total-supply) (ok (var-get total-supply)))
(define-read-only (balance-of (owner principal)) (begin (ok (ft-get-balance wrapped-token owner))))
(define-read-only (name) (ok "wrapr"))
(define-public (wrap (amount uint)) (let ((contract-address (as-contract tx-sender))) (if (and (is-ok (stx-transfer? amount tx-sender contract-address)) (is-ok (ft-mint? wrapped-token amount tx-sender))) (begin (var-set total-supply (+ (var-get total-supply) amount)) (print amount) (print (var-get total-supply)) (ok (list amount (var-get total-supply)))) (begin (err false)))))
(define-public (unwrap (amount uint)) (let ((caller tx-sender) (contract-address (as-contract tx-sender))) (print contract-address) (print amount) (if (and (<= amount (var-get total-supply)) (is-ok (ft-transfer? wrapped-token amount caller contract-address)) (is-ok (as-contract (stx-transfer? amount contract-address caller)))) (begin (var-set total-supply (- (var-get total-supply) amount)) (ok (list amount (var-get total-supply)))) (err false))))
(define-public (transfer (recipient principal) (amount uint)) (begin (print tx-sender) (print recipient) (print amount) (ft-transfer? wrapped-token amount tx-sender recipient)))